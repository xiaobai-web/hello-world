echo、print、print_r、var_dump 区别
    echo、print是php语句,var_dump和print_r是函数
    echo:输出一个或多个字符串
    print:输出字符串
    print_r:打印关于变量的易于理解的信息
    var_dump:打印关于变量的易于理解的信息(带类型)

单引号和双引号的区别
    双引号可以被分析器解析,单引号则不行

isset 和 empty 的区别
    isset:检测变量是否已设置并且非 NULL
    empty:判断变量是否为空,变量为 0/false 也会被认为是空;变量不存在,不会产生警告

static、self、$this 的区别
    static:static 可以用于静态或非静态方法中,也可以访问类的静态属性、静态方法、常量和非静态方法,但不能访问非静态属性
    self:self 指向的是当前定义所在的类,可以用于访问类的静态属性、静态方法和常量
    $this:指向的是实际调用时的对象。但 $this 不能访问类的静态属性和常量,且 $this 不能存在于静态方法中

include、require、include_once、require_once 的区别
    对 include() 语句来说,在执行文件时每次都要进行读取和评估;而对于 require() 来说,文件只处理一次(实际上,文件内容替换 require() 语句)。这就意味着如果可能执行多次的代码,则使用 require() 效率比较高。另外一方面,如果每次执行代码时是读取不同的文件,或者有通过一组文件迭代的循环，就使用 include() 语句。
    require 在出错时产生 E_COMPILE_ERROR 级别的错误。换句话说将导致脚本中止而 include 只产生警告（E_WARNING）,脚本会继续运行.
    include_once 语句在脚本执行期间包含并运行指定文件。此行为和 include 语句类似,唯一区别是如果该文件中已经被包含过,则不会再次包含。

Cookie 和 Session
    Cookie:cookie 是一种基于HTTP,浏览器端存储数据并以此来跟踪和识别用户的机制
    Session:会话机制(Session)在 PHP 中用于保持用户连续访问Web应用时的相关数据

传值和传引用的区别
    传值导致对象生成了一个拷贝,传引用则可以用两个变量指向同一个内容

构造函数和析构函数
    构造函数：具有构造函数的类会在每次创建新对象时先调用此方法
    析构函数：析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行

public、protected、private、final 区别
    public:可以在程序中的任何位置,被其他类的对象调用,子类可以继承和使用父类中的公共成员。
    protected:可以在本类和子类中被调用.
    private:只能在所属类的内部被调用和修改,不可以在类外被访问,在子类中也不可以被访问。
    final:父类中的方法被声明为 final,则子类无法覆盖该方法。如果一个类被声明为 final,则不能被继承

类的静态调用和实例化调用
    占用内存
        静态方法在内存中只有一份,无论调用多少次,都是共用的
        每一个实例化是一个对象,在内存中有多个
    不同点
        静态调用不需要实例化即可调用
        静态方法不能调用非静态属性，因为非静态属性需要实例化后，存放在对象里
        静态方法可以调用非静态方法，使用 self 关键字。php 里，一个方法被 self:: 后，自动转变为静态方法
        调用类的静态函数时不会自动调用类的构造函数

MySQL、MySQLi、PDO 区别
    MySQL
        允许 PHP 应用与 MySQL 数据库交互的早期扩展
        提供了一个面向过程的接口,不支持后期的一些特性
    MySQLi
        面向对象接口
        prepared 语句支持
        多语句执行支持
        事务支持
        增强的调试能力
    PDO
        PHP 应用中的一个数据库抽象层规范
        PDO 提供一个统一的 API 接口,无须关心数据库类型
        使用标准的 PDO API,可以快速无缝切换数据库

代码执行过程
    PHP 代码
    => 启动php及zend引擎,加载注册拓展模块 zend引擎由c语言编写
    => 对代码进行词法/语法分析 
    => 编译成opcode(opcache) opcode是在zend虚拟机中的指令
    => 执行 opcode
    PHP7 新增了抽象语法树(AST),在语法分析阶段生成 AST,然后再生成 opcode 数组

运行PHP的流程
    模块初始化阶段(Module init)
        即调用每个拓展源码中的的PHP_MINIT_FUNCTION中的方法初始化模块,进行一些模块所需变量的申请,内存分配等。
        在整个SAPI生命周期内(例如Apache启动以后的整个生命周期内或者命令行程序整个执行过程中),该过程只进行一次。
        启动Apache后，PHP解释程序也随之启动;PHP调用各个扩展（模块）的MINIT方法，从而使这些扩展切换到可用状态。
    请求初始化阶段(Request init)
        即接受到客户端的请求后调用每个拓展的PHP_RINIT_FUNCTION中的方法,初始化PHP脚本的执行环境。
    执行PHP脚本
    请求结束(Request Shutdown)
        这时候调用每个拓展的PHP_RSHUTDOWN_FUNCTION方法清理请求现场,并且ZE开始回收变量和内存
    关闭模块(Module shutdown)
        Web服务器退出或者命令行脚本执行完毕退出会调用拓展源码中的PHP_MSHUTDOWN_FUNCTION 方法

静态变量
    特点
        1.不用new其对象就可以直接调用
        2.并且静态变量存储在公共区域同一类的多个对象共同操作一个静态变量
        3.静态变量只有在脚本结束后内存才会释放
    原因
        php编译后,静态变量被放入一个公共结构体中,在调用时,是从一个公共区域调用的所以不需要new。
        该结构体要在脚本执行结束后才释放。

WebSocket
    WebSocket 是一种通信协议,定义了一个全双工通信信道,仅通过 Web 上的一个 Socket 即可进行通信
    主要特点
        推送功能:支持由服务器向客户端推送数据的推送功能
        减少通信量:只要建立起 WebSocket 连接,就希望一直保持连接状态