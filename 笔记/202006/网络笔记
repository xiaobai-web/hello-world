因特网的组成
	边缘部分 主机之间的通信
		客户服务器方式(C/S) 请求服务/得到服务
		对等方式(P2P) 得到服务的同时也服务其他主机 
	核心部分 数据交换方式
		电路交换 
			申请占用通信资源->一直占用通信资源->释放通信资源
			应用场景:数据量大的实时性通信
		报文交换
			报文不拆分进行传输	
		分组交换
			报文拆分进行传输
			利用路由器的储存转发功能
计算机网络的性能
	速率:连接在计算机网络上的主机在数字信道上传送数据位数的速率。
	带宽:数字信道所能传送的最高速率。
	吞吐量:单位时间内通过某个网络的数量,各个信道的速率总和。
	时延:包括发送时延、传播时延、处理时延、排队时延。
	时延带宽积:
	往返时间:
	利用率:利用率越高,时延越长。

计算机网络体系结构
	基本概念
		ISO:国际标准化组织
		OSI/RM:互联网法律上的国际标准
		TCP/IP:因特网实际上的国际标准
		Network Protocols:数据交换遵守的规则、标准或规定
		网络体系结构:计算机网络各层及协议集合

		实体:交换信息的硬件或软件进程
		协议:控制两个对等实体通信的规则
		服务:下层向上层提供服务
		服务访问点:相邻实体间交换信息的地方
	OSI/RM 七层网络体系
		应用层	
			负责接受用户的各种网络应用进程的调用。能够产生网路流量并且和用户交互的应用程序。协议有HTTP(网页)、SMTP(邮件)、DNS(寻址)、RPT(直播)
		表示层	
			报文加密、压缩、表示。协议有TCP和UDP
		会话层	
			服务和客户端建立会话 netstat -nb 查看会话
		传输层	
			端到端的可靠传输.协议有tcp,udp。
		网络层	
			在不同网络间转发数据包的作用。IP地址寻址,选择最佳路径。协议有ip
		数据链路层	
			为同一局域网内部的网络/数据通信提供点对点的数据传输通道。将网络层交下来的ip数据报组装成帧,并在两个相邻节点间的链路上传送。
			主要作用:
				1.数据在链路中的可靠传输。
				1.同一网络下的MAC寻址。
				2.数据进行帧格式封装。
				3.对数据提供流量控制和差错控制.
		物理层
			解决数据比特流如何在各种计算机的传输媒体上传输。确定与传输媒体的接口的一些特性。

UDP
	传输层的一种无连接协议,提供不可靠消息传送服务。
	特点:
		无连接,发送数据前不需要建立连接。
		面向报文,应用层交下来的报文,不做合并和拆分,仅是添加首部后就交给下层。
		首部开销小,只有8个字节,TCP需要20个。
		支持一对一、一对多、多对多的交互通信.
		吞吐量不受拥挤控制算法调节,只受应用程序生成数据的速率、传输宽带、源端和终端主机性能限制。
	使用场景:
		网络数据大多为短消息,对数据安全性无特殊要求、网络负担重,但对响应速度要求高
TCP
	面向连接的、可靠地、基于字节流的传输层通信协议.
	特点:
		面向连接,使用TCP协议前需要建立TCP连接。
		面向字节流。将上层交下来的数据分片,在接收端进行重组。
		连接为点对点连接,每条TCP连接只能有两个端点.
		提供可靠交付。通过TCP连接传送的数据,无差错、不丢失、不重复,并且按序到达.
	使用场景:
		文件传输、发送或接受邮件,远程登录.
	TCP三次握手过程
		服务器进程先创建传输控制块TCB,并处于监听状态,等待客户端的连接请求。
		客户端创建传输控制块TCB,并向服务器发出连接请求报文段.
		服务器收到连接请求报文段后,如同意建立连接,则发送确认报文段。
		客户端收到服务器的确认报文段后,立即回复确认报文段,并进入已建立连接状态
		服务器收到确认报文段后,也进入已建立连接状态
	TCP连接的释放过程
		客户端发出连接释放报文段,并停止再发送数据,进入FIN-WAIT-1(中止等待1)状态,等待服务器确认。
		服务器收到连接释放报文段后发出确认报文段,进入CLOSE-WAIT(关闭等待)状态,服务器若发送数据,客户端仍要接收。
		客户端收到来自服务器的确认报文段后,加入FIN-WAIT-2(终止等待2)状态,等待服务器发出连接释放报文段。
		服务器没有要发送的数据,发出连接释放报文段,进入LAST-ACK(最后确认)状态,等待客户端确认。
		客户端收到连接释放报文段后,发出确认,进入TIME-WAIT(时间等待)状态,经过时间等待计时器设置的时间2MSL后,进入CLOSED(关闭)状态.
		服务器收到客户端报文段后,进入CLOEND状态。

		TIME-WAIT后为什么要等待2MLS
		等待2MLS可以保证客户端最后一个报文段到达服务器,如果未到达,服务器则会重新发送连接释放报文段,使得客户端/服务器都可以正常进入CLOSE状态。

DNS
	位于应用层的协议主要是提供通过域名查找IP地址,或逆向从IP地址反差域名服务。
RPT
	位于应用层的实时传输协议,用于单播或多播网络中传送实时数据.
SMTP
	位于应用层可靠且有效的电子邮件传输的协议,建立在FTP文件传输服务上的一种邮件服务.

HTTP
	使用方便;传输速度慢,数据包大;实时交互时,对服务器性能压力大;数据传输安全性差
	长连接
		指在一个连接上可以连续发送多个数据包,在连接保持期间.如果没有数据包发送,需要双方发链路检测包.
	HTTP报文
		请求报文
			请求行
				包括请求方法,请求URL,HTTP协议版本
			请求头
				User-Agent:请求浏览器类型
				Accept:客户端希望接受的数据类型
				Content-Type:发送端发送的数据类型
				Host:请求的主机名
			空行
				通知服务器以下不再有请求头
			请求体
				POST有请求数据
		响应报文
			状态行
				服务器HTTP协议版本,响应状态码,状态码的文本描述
			响应头
				描述服务器基本信息,数据的描述。一般包含
				Allow:服务器支持哪些请求方法(如GET、POST等)
				Content-Encoding:文档的编码(Encode)方法。
				Content-Length:表示内容长度。
				Content-Type:表示后面的文档属于什么类型
				Date:当前GTM时间
				Expires:告诉浏览器把回送的资源缓存多长时间,-1或0则是不缓存。
				Last-Modified:文档的最后改动时间。
				Location:这个头配合302状态码使用,用于重定向接收者到一个新URI地址。
				Refresh:告诉浏览器隔多久刷新一次,以秒计。
				Server:服务器通过这个头告诉浏览器服务器的类型,由Web服务器自己设置。
				Set-Cookie:设置和页面关联的Cookie。
				Transfer-Encoding:告诉浏览器数据的传送格式。
			空行
				通知服务器以下不再有响应头
			响应体
				服务器返回的数据

	状态码分类
		状态码	整体范围	 已定义范围	分类
		1XX	    100~199	 100~101	信息提示
		2XX	    200~299	 200~206	成功
		3XX	    300~399	 300~305	重定向
		4XX	    400~499	 400~415	客户端错误
		5XX	    500~599	 500~505	服务器错误
	HTTP常见状态码
		状态码  含义	
		200	   请求没有问题
		301	   在请求的链接被移除时使用	
		302	   在请求临时的链接使用	
		304	   资源未被修改可使用旧资源	
		307	   在请求临时的链接使用	
		400	   告知客户端发送了错误请求
		403	   请求被服务器拒绝
		404	   无法找到所请求的URL
		413	   请求实体过大
		500	   服务器遇到错误	
		502	   代理或网关错误(无法连接到其父网关)
		503	   无法为请求提供服务
		504	   代理或网关超时(等待另一服务器响应超时)
	HTTP方法
		包含主体的方法有POST和PUT。
		GET 
			是最常用的方法。通常用于请求服务器发送某个资源。
		HEAD
			HEAD方法与GET方法的行为很类似,但服务器在响应中只返回首部。不会返回实体的主体部分。
		PUT 
			PUT方法会向服务器写入文档。
		POST
			向服务器输入数据。
		TRACE
			会在目的服务器端发起一个“环回”诊断。行程最后一站的服务器会弹回一条TRACE 响应,并在响应主体中携带它收到的原始请求报文。
		OPTIONS
			OPTIONS方法请求Web服务器告知其支持的各种功能。可以询问服务器通常支持哪些方法，或者对某些特殊资源支持哪些方法。
		DELETE
			DELETE方法所做的事情就是请服务器删除请求URL所指定的资源。
		get与post区别
			GET	                        POST
			后退按钮/刷新无害	            数据会被重新提交
			数据长度限制/URL长度2048字符	长度无限制
			数据可见/安全性差	            不可见/更安全
			可以被缓存	                不可以被缓存
			get效率相对post更高
			
HTTPS
	HTTPS在将HTTP报文交给传输层的TCP之前,先发送给了一个安全层进行加密。该安全层是通过SSL或TLS协议实现的。
	部分传输过程
		客户端访问服务器443端口(安全HTTP默认端口)
		建立TCP连接
		双方进行SSL握手
		客户端将请求报文发送给安全层
	SSL握手
		客户端发送可供选择的密码并请求证书
		服务器发送选中秘密和证书
		客户端发送保密信息;客户端和服务器生成密钥
		客户端和服务器互相告知,开始加密过程

Socket
	Socket是应用层与TCP/IP协议族通信的中间软件抽象层,它是一组接口.在设计模式中,Socket其实就是一个门面模式.
	创建 socket
	绑定 socket 到指定地址和端口
	开始监听连接
	读取客户端输入
	关闭 socket