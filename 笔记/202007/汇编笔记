十六进制
    0、1、2、3、4、5、6、7、8、9、A(10)、B(11)、C(12)、D(13)、E(14)、F(15)
大小转换
1Byte=8bit;1KB=1024Byte;1MB=1024KB;1GB=1024MB;1TB=1024GB

机器语言
    机器语言是机器指令的集合,一台机器可以正确执行的命令。
汇编语言
    汇编语言的主体是汇编指令,汇编指令是机器指令便于记忆的书写格式。
    有三类指令组成
        汇编指令: 机器码的助记符,有对应的机器码
        伪指令：没有对应的机器码,由编译器执行,计算机并不执行
        其他符号：如+、-、*等,由编译器识别,没有对应的机器码
存储器
    存储器(内存)是存放指令和数据的地方,被划分成若干个存储单元,一个存储单元可以存储8个二进制位(一个字节).
    从读写属性上分为两类
        随机存储器(RAM)和只读存储器(ROM).
        RAM可读可写,但必须带电存储,关机后丢失;ROM只读不写,关机后内容不会丢失。
    从功能和连接上分
        随机存储器
            用于存放供CPU使用的绝大部分程序和数据,主随机存储器一般由主板上的RAM和插在拓展插槽上的RAM组成
        装有BIOS的ROM
            BIOS是由主板和各类接口卡厂商的软件系统,可以通过它利用该硬件设备进行最基本的输出输入
        接口卡上的RAM
            某些接口卡需要对大批量输入、输出数据进行暂时存储,在其上装有RAM。(例如显卡上的RAM)
    内存地址空间
        1.都和CPU总线相连
        2.CPU对它们(存储器)进行读或写的时候都通过控制线发出内存读写命令
        符合这两个条件的都可以将它们总的看做若干存储单元组成的逻辑存储器,这个逻辑存储器就是内存地址空间

总线
    专门连接CPU和其他芯片的导线,称为总线。
    从物理上看,就是一根根导线的集合.从传送信息上看,又分为三类,地址总线、控制总线、数据总线。

    地址总线
        CPU通过地址总线来指定存储器单元.一个CPU有N根地址线,则可以说这个CPU的地址总线的宽度为N.这样的CPU最多可以寻找2的N次方个内存单元
    数据总线
        CPU与内存或其他期间之间的数据传送是通过数据总线来进行的.数据总线的宽度决定了CPU和外界的数据传送速度.
    控制总线
        CPU对外部器件的控制是通过控制总线来进行的.有多少根控制总线,就意味着CPU提供了对外部器件的多少种控制。

CPU对存储器的读写过程
    1.CPU通过地址线将地址信息发出
        由于8086CPU一次只能计算16位的数据,但物理总线有20位.所以需要运用到地址加法器将两个16位地址合成为一个20位的物理地址.
        物理地址=段地址*16+偏移地址
    2.CPU通过控制线发出内存读命令,选中存储器芯片,并通知它,将要从中读取数据
    3.存储器将指向的存储单元中的数据通过数据线送人CPU
    机器码:            10100001 00000011 00000000
    对应的汇编指令:    MOV AX,[3]
    含义:             传送3号单元的内容入寄存器AX

CPU中
    运算器进行信息处理
    寄存器进行信息存储
    控制器控制各种器件进行工作
    内部总线连接各种器件,在它们之间进行数据的传送

寄存器
    AX(AH、AL)、BX、CX、DX、SI、DI、SP、BP、IP、CS、SS、DS、ES、PSW。 16位寄存器,一个寄存器可以存储16位字节数据
    通用寄存器
        AX、BX、CX、DX这4个寄存器用来放一般性的数据.
            [ax]、[dx]可作为除数指令的被除数
            [bx]可代表偏移地址
            [cx]中存放循环次数
        CS、DS、SS、ES段寄存器,存放段地址。
            其中CS为代码段寄存器,IP为指令指针寄存器
                CPU将CS:IP指向的内存单元中的内容看作为指令。如果内存中一段信息曾被CPU执行过,那么它所在的内存单元必然被CS:IP指向过
            DS段寄存器
                当执行 mov al,[0] 时表示将ds中的数据当做段地址,[0]当做偏移地址,将该地址内存单元的字形数据送入al寄存器
                段寄存器不可以直接赋值,只能将一个寄存器的值送入段寄存器
            SS为栈顶段寄存器,SP存着栈偏移地址
                SS:SP指向栈顶元素
        SI、DI与BX寄存器功能相近
        BP也可以用来表示偏移地址。只要使用BP寄存器表示偏移地址时,若没有显性给出段地址,则使用SS中的值表示段地址
            以下的指令不可用
                mov ax,[bx+bp]
                mov ax,[si+di]

Debug调试工具
    R   命令查看、改变CPU寄存器的内容
        r                                   查看内容
        r 寄存器名称                         修改内存
    D   查看内存的内容
        d                                   查看内容
        d 段地址:偏移地址                    查看相关内存内容
    E   改写内存的内容 可写入字符串
        e 起始地址 数据 数据 数据             批量改写内存
        e 段地址:偏移地址 回车确认 空格跳过    依次改写内存
    U   查看机器码
        u 段地址:偏移地址                    查看汇编指令
    T   执行指令
        t                                   执行CS:IP指向的指令
    A   以汇编的形式写入指令
    G   程序执行到某一个位置停止
        G 0012  IP指向0012h时停止
    P   自动执行loop直到cs=0

指令
    进行数据传送或运算时,指令的两个操作对象的位数要一致。
    MOV 传送指令
    ADD 加法指令
    SUB 减法指令
    jmp 转移指令,给CS:IP赋值
        jmp 3:0B16  为CS=0003H,IP=0B16H,CPU将从00B46H读取指令
        jmp ax      将ax赋值给ip
        jmp short 标号        IP8位位移
        jmp near ptr 标号     IP16位位移
        jmp far 标号          段间转移,改变cs:ip
        jmp word ptr 内存     段内转移,改变ip
        jmp dword ptr 内存    段间转移,高地址为段地址,低地址为偏移地址
    push    入栈指令
        只进行字操作
        可操作寄存器、段寄存器、内存单元
        将寄存器中的数据存入SS:SP指向的内存单元中,并SP=SP-2
    pop     出栈指令
        只进行字操作
        可操作寄存器、段寄存器、内存单元
        将SS:SP指向的内存单元处的数据送入寄存器中,并SP=SP+2
        不会清空以出栈的内存数据,仅仅改变指针位置
    loop    循环指令
        每执行一次循环,cx-1.直至cx=0
        例:
            s: add ax,ax
            loop s
    mov ax,4c00H
    int 21H
        程序返回
    inc 加法指令
        在原有值的基础上+1
    dec 减法指令
        在原有值的基础上-1
    and 位运算
        将操作对象的相应位设为0
    or  位运算
        将操作对象的相应位设为1
    div 除法指令
        除数:8位和16位
        被除数:除数为8位时,放在AX(16位);为16位时,放在DX(高)和AX(低)中(32位)
        结果:除数为8位时,AL存储商,AH存储余数(共16位);为16位时,AX存储商,DX存储余数(共32位)
    mul 乘法指令
        8位乘法
            一个默认放在AL中,结果放在AX中
        16位乘法
            一个默认放在AX中,结果高位放在DX中存放,低位放在AX中

伪指令
    段名 segment
    段名 ends
        定义一个段
    end
        结束对源程序的编译
        指明程序入口在什么地方
    assume
        假设,用于假设某一段寄存器和程序中的某一个用segment...ends定义的段相关联
    dw  定义字型数据
    db  定义字节数据
    dd  定义双字型数据
    dup 配合dw、db、dd使用,生成重复数据
    X ptr   指明操作的数据长度
        X为word、byte
    offset 获取标号的偏移地址
    jcxz 有条件转移指令
        jcxz 标号
        当cx=0时,进行位移;当cx!=0时,不执行
    ret 近转移
        用栈中数据,修改ip内容
        ip=ss*16+sp
        sp=sp+2
    retf 远转移
        用栈中数据修改CS和IP内容
        ip=ss*16+sp
        sp=sp+2
        cs=ss*16+sp
        sp=sp+2
    call
        call 标号         将当前ip压栈后,转到标号出执行指令
            push ip
            jmp near ptr 标号
        call far ptr 标号 将当前CS:IP压栈,然后进行段间转移
            push cs
            push ip
            jmp far ptr 标号
        call word ptr 内存
            push ip
            jmp word ptr 内存
        call dwrod ptr 内存
            push cs
            push ip
            jmp dwrod ptr 内存

汇编语法类
    数据不能以字母开头,要在前面加0
    debug中的mov al,[0]在汇编源程序中应写做mov as,ds:[0]

源程序执行过程
    编译
        编译成机器码
    连接
        将多个编译文件连接成一个文件
        若调用了某个库文件中的子程序则需要连接到一起
        将编译文件进行下一步处理,生成可执行文件
    加载
        给程序分配内存区,分为PSP(程序段前缀)数据区(256字节);程序数据区
        并设置CPU的CS:IP指向程序的第一条指令,将内存区段地址存入ds,初始化其它相关寄存器,从而使程序得以运行

汇编语言中数据的位置
    立即数
        汇编指令中直接给出
    寄存器
        存在于寄存器中
    内存中
        段地址和偏移地址查找

寻址方式
    直接寻址
        [idata]
    间接寻址
        [bx]
        [si]
        [di]
        [bp]
    寄存器相对寻址
        [bx+idata]
        [si+idata]
        [di+idata]
        [bp+idata]
    基址变址寻址
        [bx+si]
        [bx+di]
        [bp+si]
        [bp+di]
    相对基址变址寻址
        [bx+si+idata]
        [bx+di+idata]
        [bp+si+idata]
        [bp+di+idata]











